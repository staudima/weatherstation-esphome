substitutions:
  name: esphome-web-5fc880
  friendly_name: Wetterstation

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev
  on_boot: 
    then:
      - delay: 30s
      - script.execute: measure_loop


esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Set up a wifi access point
  ap: {}

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Skript definieren
script:
  - id: measure_and_detect
    mode: single
    then:
      # Bias einschalten für 2 Sekunden Stabilisierung
      - switch.turn_on: resistance_bias
      - delay: 5s
      - text_sensor.template.publish:
          id: text_status
          state: !lambda "return (id(real_resistance_sensor).state < 10000) ? \"Regen\" : \"Trocken\";"
      - switch.turn_off: resistance_bias

  - id: measure_loop
    mode: single
    then:
      - while:
          condition:
            lambda: "return true;"
          then:
            - script.execute: measure_and_detect
            - script.wait: measure_and_detect
            - delay: !lambda "return (id(text_status).state == \"Trocken\") ? 30000 : 600000;"


      

# Textsensor
text_sensor:
  - platform: template
    id: text_status
    name: "Regensensor"
    icon: mdi:weather-rainy

# Sensoren
sensor:
  ## REGENSENSOR
  - platform: adc
    id: source_sensor
    pin: GPIO35
    name: "ADC"
    update_interval: 250ms
    attenuation: 12db
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
      - multiply: 0.846153 # 3.9 (11db Attenuation Vollbereichsspannung) -> 3.3V

  - platform: resistance
    sensor: source_sensor
    configuration: DOWNSTREAM
    id: real_resistance_sensor
    resistor: 10kOhm
    reference_voltage: 3.3V
    icon: "mdi:omega"

  ## WINDMESSER
  - platform: adc
    id: windmesser_resistance_raw
    pin: GPIO34
    internal: true
    update_interval: 2s
    filters:
      - median:
          window_size: 5
          send_every: 5
          send_first_at: 5

  - platform: resistance
    id: windmesser_live_raw
    resistor: 10kΩ
    internal: true
    configuration: DOWNSTREAM
    sensor: windmesser_resistance_raw

  - platform: template
    name: "Windgeschwindigkeit"
    update_interval: 10s
    lambda: |-
      float wind_corr = id(windmesser_live_raw).state - 232.6;
      float min_res = 0.0;
      float max_res = 2000.0;
      float min_speed = 0.0;
      float max_speed = 100.0;
      float speed = (wind_corr - min_res) * (max_speed - min_speed) / (max_res - min_res) + min_speed;
      if (speed < 0) {
        speed = 0;
      }
      return speed;
    unit_of_measurement: "km/h"
    accuracy_decimals: 2
    icon: mdi:weather-windy

# Intervallmessung und Intervallstromversorgung (Korrosionsschutz)
switch:
  - platform: gpio
    id: resistance_bias
    name: "Widerstands-Bias"
    pin: GPIO25
    internal: true
